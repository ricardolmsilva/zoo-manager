using System; using System.Collections.Generic; using System.IO;  namespace Zoologico {
    //Enum Habitates das AreasDoZoo
    enum Habitates
    {
        Savana = 1,         SelvaNebulosa,         Pantano     }      //Class identificadora das AreasDoZoo     class AreasDoZoo{                  string ID;         Habitates habitat;         double capacidade;         List<string> ListaFronteiras;          //Construtor da class AreasDoZoo         public AreasDoZoo (string ID, Habitates habitat, double capacidade, List<string> ListaFronteiras){             this.ID = ID;             this.habitat = habitat;             this.capacidade = capacidade;             this.ListaFronteiras = new List<string>();             this.ListaFronteiras = ListaFronteiras;         }            public string ReturnAreas() //Método para Imprir Areas no Ficheiro         {
            string stringFronteiras = "";             foreach(String s in ListaFronteiras){                 stringFronteiras += s + " ";             }             if (stringFronteiras.Length > 0){                 stringFronteiras = stringFronteiras.Remove(stringFronteiras.LastIndexOf(" "));             }             return string.Format("{0} {1} {2} {3} {4}", ID, habitat, capacidade, ListaFronteiras.Count, stringFronteiras);          }//Fim ImprimirAreas no Ficheiro             public string ReturnAreasConsola()  //Método para Imprir Areas na Consola         {              string stringFronteiras = ""; 
                foreach (string s in ListaFronteiras)
                {
                    stringFronteiras += s + " ";
                }

            if (stringFronteiras.Length > 0){                 stringFronteiras = stringFronteiras.Remove(stringFronteiras.LastIndexOf(" "));             }              return string.Format("{0,7} | {1,-15} | {2,6} | {3,7} | {4,-20} ", ID, habitat, capacidade, ListaFronteiras.Count, stringFronteiras);          }//Fim ImprimirAreas na Consola            public string getNomeArea() //Método que retorna o ID         {             return this.ID;         }          public string getHabitateArea() //Método que retorna Habitate         {             return this.habitat.ToString();         }          public void eliminarFronteira(string eliminarFronteira)         {             foreach (string area in ListaFronteiras)             {                 if(area==eliminarFronteira){                     ListaFronteiras.Remove(eliminarFronteira);                     break;                 }             }         }          public bool maxFronteiras(string areaID){             if (this.ID == areaID)
                if (ListaFronteiras.Count == 3)
                    return true;             return false;         }          public bool VerificaSeAreaEAdjacente(string area){             foreach(string s in ListaFronteiras){                 if (s == area)                     return true;             }             return false;         }//Fim ImprimirAreas na Consola      }//Fim Class }